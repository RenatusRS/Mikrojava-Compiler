package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;
import java.lang.reflect.Field;


parser code {:
	Logger log = Logger.getLogger(getClass());

	// redefined methods to print error messages

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	}

	public void syntax_error(Symbol cur_token) {
		report_error("Syntax error", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
		report_fatal_error("Unrecoverable syntax error", cur_token);
	}

	public void report_error(String message, Object info) {
		if (info instanceof Symbol) message += " on line " + ((Symbol) info).left;

		log.error(message);
	}
:}

scan with {:
	Symbol s = this.getScanner().next_token();

	if (s != null && s.value != null) {
		Field[] fields = sym.class.getDeclaredFields();

		String name = null;
		for (Field field : fields) {
			if (field.getType() == int.class && ("#" + field.getInt(null)).equals(s.toString())) {
				name = field.getName();
				break;
			}
		}

		log.info(name + " " + s.value);
	}

	return s;
:}

terminal PROG, BREAK, CLASS, ELSE, CONST, IF, WHILE, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE, MAP;
terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal AND, OR;
terminal ASSIGN;
terminal INC, DEC;
terminal SEMI, COLON, COMMA, DOT;
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal LAMBDA;

terminal Integer NUMBER;
terminal String IDENT;
terminal Boolean BOOL;
terminal Character CHAR;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, ReturnTypes, Factor, MethodVarDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ConstValue, Term, Expr, CondFact;

nonterminal ProgDeclList, ProgDecl;
nonterminal ConstDeclList, ConstDecl;
nonterminal VarDeclList, VarDecl;
nonterminal ClassDecl, ConstructorDecl;
nonterminal MethodDeclList, FormPars, FormParsList, FormPar;
nonterminal StatementList, Statement, DesignatorStatement;
nonterminal IfStatement, WhileStatement;
nonterminal ActPars, ActParsList;
nonterminal Condition, CondTerm;
nonterminal AssignOp, RelOp, AddOp, MulOp;

nonterminal PrintStatementOptional;

nonterminal MethodVars, MethodVar, MethodVarDeclList;

nonterminal ArrayOption, MatrixOption;

nonterminal StatementHelper, ReturnItem;
nonterminal IfStatementIf, IfStatementElse;
nonterminal WhileTrigger;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p ProgDeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:name;

ProgDeclList ::= ProgDeclList ProgDecl
	| ;

ProgDecl ::= (ProgConstDeclarations) CONST Type:constDecl ConstDeclList SEMI
	| (ProgVarDeclarations) Type:varDecl VarDeclList SEMI;
// EXAMPLE: const int a = 5, b = 6, c = 7; int a, b, c; class A extends B { ... }


// CONST DECLARATION LIST

ConstDeclList ::= ConstDeclList COMMA ConstDecl
	| ConstDecl;
// EXAMPLE: a = 5, b = 6, c = 7 # a = 5

ConstDecl ::= (ConstDecl) IDENT:name ASSIGN ConstValue;
// EXAMPLE: a = 5

ConstValue ::= (ConstInt) NUMBER
	| (ConstChar) CHAR
	| (ConstBool) BOOL;
// EXAMPLE: 5 # 'a' # true


// VAR DECLARATION LIST

VarDeclList ::= VarDeclList COMMA VarDecl
	| VarDecl;
// EXAMPLE: a, b[], c # a

VarDecl ::= (VarDeclName) IDENT:name
 	| (VarDeclArray) IDENT:name LBRACKET RBRACKET
	| (VarDeclMatrix) IDENT:name LBRACKET RBRACKET LBRACKET RBRACKET;
// EXAMPLE: a # b[] # c[][]

MethodVars ::= MethodVars MethodVar
	| ;

MethodVar ::= Type MethodVarDeclList SEMI;

MethodVarDeclList ::= MethodVarDeclList COMMA MethodVarDecl
	| MethodVarDecl;

MethodVarDecl ::= (MethodVarName) IDENT:name
	| (MethodVarArray) IDENT:name LBRACKET RBRACKET
	| (MethodVarMatrix) IDENT:name LBRACKET RBRACKET LBRACKET RBRACKET;

// METHOD DECLARATION LIST

MethodDeclList ::= MethodDeclList MethodDecl
	| ;
// EXAMPLE: int a() { ... }, void b() { ... } # int a() { ... } # {{empty}}

MethodDecl ::= (MethodDecl) MethodTypeName LPAREN FormPars RPAREN MethodVars LBRACE StatementList RBRACE;
// EXAMPLE: int a() int b, b[] { ... }

MethodTypeName ::= (MethodTypeName) ReturnTypes IDENT:name;

FormPars ::= FormParsList
	| ;
// EXAMPLE: int a, int b, int c # {{empty}}

FormParsList ::= FormParsList COMMA FormPar
	| FormPar;
// EXAMPLE: int a, int b, int c # int a

FormPar ::= (FormParVar) Type IDENT:name
	| (FormParArray) Type IDENT:name LBRACKET RBRACKET
	| (FormParMatrix) Type IDENT:name LBRACKET RBRACKET LBRACKET RBRACKET;
// EXAMPLE: int a # int b[] # int c[][]


// STATEMENT LIST

StatementList ::= StatementList Statement
	| ;
// EXAMPLE: a = 5; b = 6; c = 7; # a = 5; # {{empty}}

Statement ::= (DesignatorStmt) DesignatorStatement SEMI
	| (IfStmt) IfStatement
	| (ReturnStmt) RETURN ReturnItem SEMI
	| (PrintStmt) PRINT LPAREN Expr PrintStatementOptional RPAREN SEMI
	| (WhileStmt) WhileTrigger LPAREN Condition RPAREN StatementHelper
	| (ReadStmt) READ LPAREN Designator RPAREN SEMI
	| (BreakStmt) BREAK SEMI
    | (ContinueStmt) CONTINUE SEMI;
	// | LBRACE StatementList RBRACE; // TODO check if this is correct
// EXAMPLES:
//   a = 5;
//   if (a == 5) a = 6;
//   return a;
//   print(a);
//   while (a == 5) a = 6;
//   read(a);
//   break;
//   continue;
//   // { a = 5; b = 6; c = 7; }

// DESIGNATOR STATEMENT
DesignatorStatement ::= (DesignatorStatementAssign) Designator AssignOp Expr
	| (DesignatorStatementInc) Designator INC
	| (DesignatorStatementDec) Designator DEC
	| (DesignatorStatementFunc) Designator LPAREN ActPars RPAREN;
// EXAMPLE: a = 5; # a++; # a--; # a(b, c, d);

Designator ::= (DesignatorVar) IDENT:name
	| (DesignatorArray) IDENT:name LBRACKET Expr RBRACKET
	| (DesignatorMatrix) IDENT:name LBRACKET Expr RBRACKET LBRACKET Expr RBRACKET; // TODO add class field access
// EXAMPLE: a # a[5] # a[5][6]

// OTHER STATEMENTS

IfStatementIf ::= IF LPAREN Condition RPAREN StatementHelper;

IfStatementElse ::= ELSE StatementHelper
	| ;

IfStatement ::= IfStatementIf IfStatementElse;
// EXAMPLES:
//   if (a == 5) a = 6;
//   if (a == 5) { a = 6; b = 7; }
//   if (a == 5) a = 6; else a = 7;
//   if (a == 5) { a = 6; b = 7; } else a = 8;
//   if (a == 5) a = 6; else { a = 7; b = 8; }
//   if (a == 5) { a = 6; b = 7; } else { a = 7; b = 8; }



StatementHelper ::= Statement
	| LBRACE StatementList RBRACE;

WhileTrigger ::= (WhileTrigger) WHILE;

ReturnItem ::= (ReturnItemExpr) Expr
	| (ReturnItemVoid) ;
// EXAMPLE: 5 # {{empty}}

PrintStatementOptional ::= COMMA NUMBER
	| ;


// CONDITIONS
Condition ::= CondTerm
	| CondTerm OR Condition;
// EXAMPLE: a == 5 # a == 5 || b == 6

CondTerm ::= CondFact
	| CondFact AND CondTerm;
// EXAMPLE: a == 5 # a == 5 && b == 6

CondFact ::= (CondFactRel) Expr:exprLeft RelOp:operator Expr:exprRight
	| (CondFactExpr) Expr;
// EXAMPLE: a == 5

// EXPRESSIONS

Expr ::= (ExprTerm) Term
	| (ExprAdd) Expr AddOp Term
	| (ExprMinus) MINUS Term
   	| (ExprMap) Designator DOT MAP LPAREN IDENT:iterator LAMBDA Expr RPAREN;
// EXAMPLE: 5 # 5 + 6 # -5

Term ::= (TermFactor) Factor
	| (TermMul) Term MulOp Factor;
// EXAMPLE: 5 # 5 * 6 / 7

Factor ::= (FactorVar) Designator
	| (FactorConst) ConstValue
	| (FactorExpression) LPAREN Expr RPAREN
	| (FactorFuncCall) Designator LPAREN ActPars RPAREN
	| (FactorArray) NEW Type LBRACKET Expr RBRACKET
	| (FactorMatrix) NEW Type LBRACKET Expr RBRACKET LBRACKET Expr RBRACKET;
// EXAMPLE: 5 # 'a' # true # (5 + 6) # a(5, 6, 7) # new int[5] # new int[5][6] TODO check this order

// ACTUAL PARAMETERS
ActPars ::= ActParsList
	| ;
// EXAMPLE: 5, 6, 7 # {{empty}}

ActParsList ::= ActParsList COMMA Expr
	| Expr;
// EXAMPLE: 5, 6, 7 # 5


// TYPE
Type ::= (Type) IDENT:typeName;
// EXAMPLE: int

ReturnTypes ::= (ReturnType) Type
	| (ReturnVoid) VOID;
// EXAMPLE: int # void

// OPERATIONS

AssignOp ::= (AssignOp) ASSIGN;
// EXAMPLE: =

RelOp ::= (EqualRO) EQUAL
	| (NotEqualRO) NOT_EQUAL
	| (GreaterRO) GREATER
	| (GreaterEqualRO) GREATER_EQUAL
	| (LessRO) LESS
	| (LessEqualRO) LESS_EQUAL;
// EXAMPLE: == # != # > # >= # < # <=

AddOp ::= (PlusAO) PLUS
	| (MinusAO) MINUS;
// EXAMPLE: + # -

MulOp ::= (MulMO) MUL
	| (DivMO) DIV
	| (ModMO) MOD;
// EXAMPLE: * # / # %