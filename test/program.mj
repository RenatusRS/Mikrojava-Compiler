// Test888 – APOCALYPSE NOW

program test888

// ─── CONSTANTS ───────────────────────────────────────────────────────────────
const int ZERO  = 0;
const int ONE   = 1;
const int TWO   = 2;
const int THREE = 3;
const int FOUR  = 4;
const int FIVE  = 5;
const int SIX   = 6;
const int SEVEN = 7;
const int EIGHT = 8;
const int NINE  = 9;
const int TEN   = 10;

// ─── GLOBALS ─────────────────────────────────────────────────────────────────
int  A[];  int B[];  int C[];  int D[];
char letters[];

int a, b, c, d;          // stdin values

set s1, s2, s3, s4, sFinal;

{
	void main()
		int bodovi, tmp1, result, finalVal;
		int arrInput[];
	{
		// ── SECTION 1 · arith-bomb ─────────────────────────────────────────
		bodovi = ((TEN * NINE) / THREE) + ord('a') - (FIVE % TWO) + (EIGHT - FOUR);
		print(bodovi);               //130
		print(eol);

		// ── SECTION 2 · array labyrinth & postfix ++ ──────────────────────
		A = new int[15];
		B = new int[20];
		C = new int[12];
		D = new int[5];
		letters = new char[4];
		letters[ZERO] = 'p'; letters[ONE] = 'q'; letters[TWO] = 'r'; letters[THREE] = 's';

		A[ZERO]  = FIVE;                     //5
		A[ONE]   = A[ZERO] + FIVE;           //10
		A[TWO]   = A[ONE] - THREE;           //7
		A[THREE] = A[A[ZERO] / FIVE];        //10
		A[FOUR]  = 64;
		A[FIVE]  = A[FOUR] / A[ZERO];        //12
		A[SIX]   = A[A[A[ZERO] / A[ZERO]]];  //0  (A[10] not yet set)

		B[ONE]   = A[TWO] + A[FIVE];         //19
		B[TWO]   = -B[ONE];                  //-19
		B[THREE] = A[ZERO]++;                //5   (A[0] becomes 6)

		A[TEN] = B[ONE] / TWO;               //9
		A[TEN]++;                            //10

		C[ZERO]  = THREE;                    //3
		C[THREE] = TWO + ONE;                //3
		C[ONE]   = SEVEN;                    //7

		tmp1 = A[
		          B[
		            A[ ord(letters[ZERO]) % FOUR ] / TEN
		          ]
		        ];
		print(A[ZERO]);  //6
		print(eol);
		print(A[TEN]);   //10
		print(eol);
		print(B[THREE]); //5
		print(eol);
		print(C[ZERO]);  //3
		print(eol);

		D[ZERO] = A[ B[ C[ A[ZERO] ] ] ];
		print(D[ZERO]);  //6
		print(eol);
		print(tmp1);     //6
		print(eol);

		// ── SECTION 3 · stdin torture (one per row) ───────────────────────
		read(a); //8
		read(b); //16
		read(c); //24
		read(d); //32

		result = (a + b) * c / A[ONE] + A[TWO] + A[b % FIVE]++; //74
		print(result);  //74
		print(eol);
		print(A[ONE]);  //11
		print(eol);

		finalVal = result
		         + d * A[ZERO]                 //32*6
		         + (c - b) * A[TEN]            //(24-16)*10
		         - ord(letters[A[ZERO] % FOUR]);
		print(finalVal); //232
		print(eol);

		// ── SECTION 4 · set mayhem, addAll stressed ───────────────────────
		arrInput = new int[4];
		arrInput[ZERO] = A[ZERO];        //6
		arrInput[ONE]  = A[ONE];         //11
		arrInput[TWO]  = A[TEN];         //10
		arrInput[THREE]= finalVal % 50;  //32

		s1 = new set[10]; s2 = new set[10];
		addAll(s1, arrInput);            //6 11 10 32

		add(s2, d);          //32
		add(s2, a + b);      //24
		add(s2, C[ONE]);     //7

		s3 = s1 union s2;
		print(s3);           //6 7 10 11 24 32
		print(eol);

		s4 = new set[5]; add(s4, 90);    //ASCII 'Z'
		sFinal = s3 union s4;
		print(sFinal);       //6 7 10 11 24 32 90
		print(eol);
	}
}

// ─── Expected stdin (one per row) ───────────────────────────────────────────
//8
//16
//24
//32
